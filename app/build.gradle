buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'io.sentry.android.gradle'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    // HyperTrack Repository
    maven { url 'http://hypertrack-android-sdk.s3-website-us-west-2.amazonaws.com/' }
}

sentry {
    // Disables or enables the automatic configuration of proguard
    // for Sentry.  This injects a default config for proguard so
    // you don't need to do it manually.
    autoProguardConfig true

    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload true
}

def keyPropertiesFile = rootProject.file("key.properties");
if (keyPropertiesFile == null || !keyPropertiesFile.exists()) {
    throw new GradleException("key.properties file is missing that contains HyperTrack Publishable Key." +
            "\nRefer Step 2 at https://github.com/hypertrack/hypertrack-live-android#to-use-this-app for more info.");
}
def keyProperties = new Properties();
keyProperties.load(new FileInputStream(keyPropertiesFile));

android {

    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    lintOptions {
        abortOnError false
    }

    /*
    * Release Build Variant
    * Add your keystore file to app folder
    * Create a new keystore.properties file
    * inside root folder with values
    * storeFile=<File path of keystore file>
    * storePassword=
    * keyAlias=
    * keyPassword=
    */

    File keystorePropertiesFile = rootProject.file("keystore.properties");
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    //Check if Fabric crashlyitcs is configured or not.
    def fabricCheck = false;
    File fabricPropertiesFile = rootProject.file("app/fabric.properties");
    if (fabricPropertiesFile.exists()) {
        System.out.println("Fabric File Exist");
        def fabricProperties = new Properties()
        fabricProperties.load(new FileInputStream(fabricPropertiesFile))
        String apiSecret = fabricProperties['apiSecret'];
        if (apiSecret != null && !apiSecret.isEmpty() && !apiSecret.equalsIgnoreCase("CRASHLYTICS_API_SECRET")) {
            System.out.println("Key Exist");
            fabricCheck = true;
        } else {
            System.out.println("Key Doesnt Exist");
        }
    }

    /*
    *   Set App version using gradle.properties file
    * */
    def versionPropsFile = file('gradle.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('cUDD' in runTasks || 'crashlyticsUploadDistributionDebug' in runTasks
                || 'cUDR' in runTasks || 'crashlyticsUploadDistributionRelease' in runTasks) {
            value = 1
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        versionProps['version'] = versionMajor + "." + versionMinor + "." + versionPatch
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "io.hypertrack.placeline"
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            minSdkVersion 16
            targetSdkVersion 26
            resValue "string", "app_name", "Placeline"
            buildConfigField "String", "HYPERTRACK_PK", keyProperties['HYPERTRACK_PUBLISHABLE_KEY']
            buildConfigField "String", "HYPERTRACK_BASE_URL_V1", '"https://api.hypertrack.com/api/v1/"'
            buildConfigField "String", "HYPERTRACK_BASE_URL_V2", '"https://api.hypertrack.com/api/v2/"'

            manifestPlaceholders = [applicationLabel: "@string/app_name"]
            multiDexEnabled true
            if (keystorePropertiesFile.exists())
                signingConfig signingConfigs.release
            if (findProject(':library') != null)
                buildConfigField "String", "isHyperTrackLive", '"exist"'
            else
                buildConfigField "String", "isHyperTrackLive", '""'
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def newFileName = "Placeline-${variant.versionName}.apk"
            def apk = output.outputFile
            //System.out.println(apk.parent + ", newfilename: " + newFileName)
            output.outputFileName = new File("../", newFileName)
        }
    }
    buildTypes {
        release {
            if (keyProperties['HYPERTRACK_PUBLISHABLE_KEY'] == "\"YOUR_HYPERTRACK_PUBLISHABLE_KEY\"") {
                throw new GradleException("Publishable Key is Missing in key.properties file.\nRefer Step 2 at https://github.com/hypertrack/hypertrack-live-android#to-use-this-app for more info.");
            }
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (!fabricCheck) {
                ext.enableCrashlytics = false
            }
        }

        debug {
            if (keyProperties['HYPERTRACK_DEBUG_PUBLISHABLE_KEY'] == "\"YOUR_HYPERTRACK_PUBLISHABLE_KEY\"") {
                throw new GradleException("Publishable Key is Missing in key.properties file.\nRefer Step 2 at https://github.com/hypertrack/hypertrack-live-android#to-use-this-app for more info.");
            }
            debuggable true
            minifyEnabled false
            versionNameSuffix '-debug'
            applicationIdSuffix '.debug'
            buildConfigField "String", "HYPERTRACK_PK", keyProperties['HYPERTRACK_DEBUG_PUBLISHABLE_KEY']
            resValue "string", "app_name", "Debug Placeline"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (!fabricCheck) {
                ext.enableCrashlytics = false
            }
        }

        tracking{
            if (keyProperties['HYPERTRACK_PUBLISHABLE_KEY'] == "\"YOUR_HYPERTRACK_PUBLISHABLE_KEY\"") {
                throw new GradleException("Publishable Key is Missing in key.properties file.\nRefer Step 2 at https://github.com/hypertrack/hypertrack-live-android#to-use-this-app for more info.");
            }
            debuggable true
            minifyEnabled false
            versionNameSuffix '-tracking'
            applicationIdSuffix '.tracking'
            resValue "string", "app_name", "Placeline"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (!fabricCheck) {
                ext.enableCrashlytics = false
            }
        }

        if (keyProperties['STAGING_HYPERTRACK_PUBLISHABLE_KEY'] != null) {
            staging {
                debuggable true
                minifyEnabled false
                applicationIdSuffix '.staging'
                versionNameSuffix '-staging'
                resValue "string", "app_name", "Staging Placeline"
                manifestPlaceholders = [applicationLabel: "@string/app_name"]
                buildConfigField "String", "HYPERTRACK_PK", keyProperties['STAGING_HYPERTRACK_PUBLISHABLE_KEY']
                buildConfigField "String", "HYPERTRACK_BASE_URL_V2", '"https://staging-api.hypertrack.com/api/v1/"'
                buildConfigField "String", "HYPERTRACK_BASE_URL_V2", '"https://staging-api.hypertrack.com/api/v2/"'
                if (keystorePropertiesFile.exists())
                    signingConfig signingConfigs.release
                if (!fabricCheck) {
                    ext.enableCrashlytics = false
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'org.robolectric:robolectric:3.6.1'
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    trackingImplementation 'com.facebook.stetho:stetho:1.5.0'

    // Other dependencie
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.facebook.stetho:stetho:1.5.0'

    if (findProject(':library') != null) {
        // HyperTrack SDK dependency
        implementation(project(':library')) {
            transitive = true
        }
    } else {
        implementation("com.hypertrack:android:0.7.30@aar") {
            transitive = true;
        }
    }

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.4.2'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.github.sundeepk:compact-calendar-view:1.9.2-beta'
    implementation 'com.github.rubensousa:gravitysnaphelper:1.1'
    implementation 'com.skyfishjy.ripplebackground:library:1.0.1'
    implementation 'com.github.Q42:AndroidScrollingImageView:1.2'
    implementation 'io.branch.sdk.android:library:2.+'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true
    }

    implementation 'com.android.support:multidex:1.0.3'

    // Leak Canary dependency for Debug builds
    debugImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    trackingImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    if (keyProperties['STAGING_HYPERTRACK_PUBLISHABLE_KEY'] != null) {
        stagingImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    }

    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    //Check if SDK library exist or not
    if (findProject(':library') != null) {
        println("Library Exist");
        implementation project(':library')
    } else {
        println("Library Doesn't Exist");
    }
}

/*
* Enable FCM integration for real time tracking by adding a google-services.json
* Once you have either an existing account on <a href="https://console.developers.google.com/">Google Developer</a> or a new account <a href="https://console.firebase.google.com">Firebase console</a>, you will need to add <a href="https://support.google.com/firebase/answer/7015592">google-services.json</a> file for your app to remove the below compilation failure.
*/
File googleServicesFile = rootProject.file("app/google-services.json");
if (googleServicesFile.exists()) {
    System.out.println("Google Service File Exist");
    apply plugin: 'com.google.gms.google-services'
}